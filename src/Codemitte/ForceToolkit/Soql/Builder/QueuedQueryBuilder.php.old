<?php
namespace Codemitte\Sfdc\Soql\Builder;

use Codemitte\Sfdc\Soql\Parser\QueryParser;
use Codemitte\Sfdc\Soql\Renderer\QueryRenderer;
use Codemitte\Sfdc\Soql\AST\Query;
use Codemitte\Sfdc\Soap\Client\ClientInterface;
use Codemitte\Soap\Mapping\GenericResultCollection;
use Codemitte\Sfdc\Soql\Builder\Expression AS Expr;

class QueuedQueryBuilder implements QueryBuilderInterface
{
    /**
     * @var AST\Query
     */
    private $query;

    /**
     * @var \Codemitte\Sfdc\Soql\Parser\QueryParser
     */
    private $parser;

    /**
     * @var array
     */
    private $queryParts;

    /**
     * @var array
     */
    private $parameters;


    /**
     * @param \Codemitte\Sfdc\Soql\Parser\QueryParser $queryParser
     */
    public function __construct(QueryParser $queryParser)
    {
        $this->queryParser = $queryParser;

        $this->resetQueryParts();

        $this->resetParameters();
    }

    /**
     * Method to support legacy calls to raw "query()"-method
     * on client instance.
     *
     * @param $soql
     * @param array $parameters
     * @return \Codemitte\Soap\Mapping\GenericResult
     */
    public function query($soql, array $parameters = array())
    {
        return $this->prepareStatement($soql)->execute($parameters);
    }

    /**
     * Like query(), but does not call execute in one step, supporting
     * chaining.
     *
     * @param $soql
     * @param array $parameters
     * @return \Codemitte\Sfdc\Soql\Builder\QueryBuilder
     */
    public function prepareStatement($soql, array $parameters = array())
    {
        $this->parameters['query'] = $parameters;

        $this->queryParts['query'] = $soql;
    }

    /**
     * @param $soql
     * @return \Codemitte\Sfdc\Soql\Builder\QueryBuilder
     */
    public function select($soql)
    {
        $this->queryParts['select'] = array();

        return $this->addSelect($soql);
    }

    /**
     * @param $soql
     * @return \Codemitte\Sfdc\Soql\Builder\QueryBuilder
     */
    public function addSelect($soql)
    {
        $this->queryParts['select'][] = $soql;

        return $this;
    }

    /**
     * @param $soql
     * @return QueryBuilder
     */
    public function from($soql)
    {
        $this->queryParts['from'] = $soql;
    }

    /**
     * @param LogicalJunction|string $soql
     * @param array $parameters
     * @return QueryBuilder
     */
    public function where($soql, array $parameters = array())
    {
        $this->parameters['where'] = array();

        $this->queryParts['where'] = null;

        return $this->addWhere($soql, $parameters);
    }

    /**
     * @param $soql
     * @param array $parameters
     * @return QueryBuilder
     */
    public function andWhere($soql, array $parameters = array())
    {
        return $this->addWhere(new Expr\AndExpr($soql), $parameters);
    }

    /**
     * @param $soql
     * @param array $parameters
     * @return QueryBuilder
     */
    public function orWhere($soql, array $parameters = array())
    {
        return $this->addWhere(new Expr\OrExpr($soql), $parameters);
    }

    /**
     * @param LogicalJunction|string $soql
     * @param array $parameters
     * @return QueryBuilder
     */
    public function addWhere($soql, array $parameters = array())
    {
        $this->parameters['where'] = array_merge($this->parameters['where'], $parameters);

        if( ! $this->queryParts['where'] instanceof Expr\ExpressionInterface)
        {
            if($soql instanceof Expr\AndExpr)
            {
                $this->queryParts['where'] = $soql;
            }
            else
            {
                $this->queryParts['where'] = new Expr\AndExpr($soql);
            }
        }
        else
        {
            $this->queryParts['where']->addExpression($soql);
        }
        return $this;
    }

    /**
     * @param LogicalJunction|string $soql
     * @return QueryBuilder
     */
    public function withDataCategory($soql)
    {
        $this->parameters['with'] = array();

        $this->queryParts['with'] = null;

        return $this->addWithDataCategory($soql);
    }

    /**
     * @param $soql
     * @return QueryBuilder
     */
    public function andWithDataCategory($soql)
    {
        return $this->addWithDataCategory(new Expr\AndExpr($soql));
    }

    /**
     * @param LogicalJunction|$soql
     * @return QueryBuilder
     */
    public function addWithDataCategory($soql)
    {
        if( ! $this->queryParts['with'] instanceof Expr\ExpressionInterface)
        {
            if($soql instanceof Expr\AndExpr)
            {
                $this->queryParts['with'] = $soql;
            }
            else
            {
                $this->queryParts['with'] = new Expr\AndExpr($soql);
            }
        }
        else
        {
            $this->queryParts['with']->addExpression($soql);
        }
        return $this;
    }

    public function groupBy($soql)
    {
        $this->queryParts['groupBy'] = array();

        return $this->addGroupBy($soql);
    }

    /**
     * @param $soql
     * @return QueryBuilder
     */
    public function addGroupBy($soql)
    {
        $this->queryparts['groupBy'][] = $soql;

        return $this;
    }

    /**
     * @param bool $groupByCube
     * @return QueryBuilder
     */
    public function setGroupByCube($groupByCube = true)
    {
        $this->queryParts['groupByCube'] = $groupByCube;
    }

    /**
     * @param bool $groupByRollup
     * @return QueryBuilder
     */
    public function setGroupByRollup($groupByRollup = true)
    {
        $this->queryParts['groupByRollup'] = $groupByRollup;
    }

    /**
     * @param LogicalJunction|$soql
     * @return QueryBuilder
     */
    public function having($soql)
    {
        $this->queryParts['having'] = null;

        return $this->addHaving($soql);
    }

    /**
     * @param \Codemitte\Sfdc\Soql\AST\LogicalJunction|string $soql
     * @return QueryBuilder
     */
    public function addHaving($soql)
    {
        if( ! $this->queryParts['having'] instanceof Expr\ExpressionInterface)
        {
            if($soql instanceof Expr\AndExpr)
            {
                $this->queryParts['having'] = $soql;
            }
            else
            {
                $this->queryParts['having'] = new Expr\AndExpr($soql);
            }
        }
        else
        {
            $this->queryParts['having']->addExpression($soql);
        }
        return $this;
    }

    /**
     * @param string $soql
     * @return QueryBuilder
     */
    public function andHaving($soql)
    {
        return $this->addHaving(new Expr\AndExpr($soql));
    }

    /**
     * @param string $soql
     * @return QueryBuilder
     */
    public function orHaving($soql)
    {
        return $this->orHaving(new Expr\AndExpr($soql));
    }

    /**
     * @param $soql
     * @return QueryBuilder
     */
    public function orderBy($soql)
    {
        $this->queryParts['orderBy'] = array();

        return $this->addOrderBy($soql);
    }

    /**
     * @param $soql
     * @return QueryBuilder
     */
    public function addOrderBy($soql)
    {
        $this->queryParts['orderBy'][] = $soql;

        return $this;
    }

    /**
     * @param $limit
     * @return QueryBuilder
     */
    public function limit($limit)
    {
        $this->queryParts['limit'] = $limit;
    }

    /**
     * @param $offset
     * @return QueryBuilder
     */
    public function offset($offset)
    {
        $this->queryParts['offset'] = $offset;
    }

    /**
     * @return \Codemitte\Sfdc\Soql\AST\Query
     */
    public function getQuery()
    {
        if(null === $this->query)
        {
            $this->buildQuery();
        }
        return $this->query;
    }

    /**
     * @param array $parameters
     * @return QueryBuilder
     */
    public function bind(array $parameters)
    {
        // TODO: Implement bind() method.
    }

    /**
     * @return string
     */
    public function getSoql()
    {
        // TODO: Implement getSoql() method.
    }

    /**
     * @param array $parameters
     * @return \Codemitte\Soap\Mapping\GenericResult
     */
    public function execute(array $parameters = array())
    {
        // TODO: Implement execute() method.
    }

    /**
     * @param array $parameters
     * @param null $default
     * @return \Codemitte\Sfdc\Soap\Mapping\SobjectInterface
     */
    public function getSingleResult(array $parameters = array(), $default = null)
    {
        // TODO: Implement getSingleResult() method.
    }

    /**
     * Proxy for getSingleResult()
     * @param array $parameters
     * @param null $default
     * @return \Codemitte\Sfdc\Soap\Mapping\SobjectInterface
     */
    public function fetchOne(array $parameters = array(), $default = null)
    {
        // TODO: Implement fetchOne() method.
    }

    /**
     * @param array $parameters
     * @return \Codemitte\Soap\Mapping\GenericResultCollection
     */
    public function getResult($parameters = array())
    {
        // TODO: Implement getResult() method.
    }

    /**
     * Proxy for getResult()
     *
     * @param array $parameters
     * @return \Codemitte\Soap\Mapping\GenericResultCollection
     */
    public function fetch($parameters = array())
    {
        // TODO: Implement fetch() method.
    }

    /**
     * @param array $parameters
     * @return int
     */
    public function count(array $parameters = array())
    {
        // TODO: Implement count() method.
    }

    /**
     * Builds the AST from the queued query parts.
     */
    private function buildQuery()
    {
        // FULL QUERY GIVEN (SELECT ... FROM ...)
        if(isset($this->queryParts['query']))
        {
            $this->query = $this->queryParser->parse($this->queryParts['query']);
        }

        if(null === $this->query)
        {
            $this->query = new Query();
        }

        // SELECT PART
        $selectPart = $this->query->getSelectPart();

        if(null === $selectPart)
        {
            $selectPart = new \Codemitte\Sfdc\Soql\AST\SelectPart();

            $this->query->setSelectPart($selectPart);
        }

        if(isset($this->queryParts['select']))
        {
            foreach($this->queryParts['select'] AS $soql)
            {
                $selectPart->addSelectFields($this->parser->parseSelectSoql($soql));
            }
        }

        $fromPart = $this->query->getFromPart();

        if(null === $fromPart)
        {
            $fromPart = new \Codemitte\Sfdc\Soql\AST\FromPart($this->parser->parseFromSoql($this->queryParts['from']));

            $this->query->setFromPart($fromPart);
        }
    }

    /**
     * Resets the query parts of the builder in order
     * to start a new query.
     */
    private function resetQueryParts()
    {
        $this->queryParts = array(
            'query'  => null,
            'select' => array(),
            'from' => null,
            'where' => null,
            'with' => null,
            'groupBy' => array(),
            'groupByCube' => null,
            'groupByRollup' => null,
            'having' => null,
            'orderBy' => array(),
            'limit' => null,
            'offset' => null
        );
    }

    /**
     * Resets the bound parameters of the builder.
     */
    private function resetParameters()
    {
        $this->parameters = array(
            'query' => array(),
            'where'  => array(),
            'with'   => array(),
            'having' => array(),
        );
    }
}
